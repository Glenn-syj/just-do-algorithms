DP란 무엇인가,

Dynamic Programming. 
일명 동적 프로그래밍은 '동적 계획법'이라 부르는 것이 의도에 적합하다고 한다.

'동적 계획법'은 주어진 문제를 작은 문제들로 나눈뒤 각 작은 문제들에서 얻은 답을 통해,
처음 주어진 문제의 답을 도출해 내는 '분할 정복'의 방식을 사용한다.

다만 '동적 계획법'이 '분할 정복'과 다른 점은,
특정한 '작은 문제'가 두 번 이상 반복될 때, 이 문제를 여러번 계산하지 않고,
'한 번 계산할 때 도출한 답'을 재활용한다는 것이다.

동적 계획법 문제를 풀기 위해서는,
우선, 분할 정복으로 문제를 풀 수 있어야 한다.
패턴을 파악하여 주어진 조건을 충족하는 답을 도출하는 코드를 구성해야 한다.
위의 단계를 거친 이후에, 두 번 이상 반복되는 작은 문제를 동적 계획법을 이용해,
값을 저장한 이후, 해당 작은 문제가 반복될 때 바로 값을 불러오는 것이다.


포도주 문제에 대한 예시를 보자.
[6, 10, 13, 9, 8, 1]
6개의 포도주가 존재할 때, 어떻게 최대로 포도주를 마시는 방법을 찾을 수 있을까?

첫 번째 요소인 6만 존재한다고 했을 때,
6을 마시는 것이 최대일 것이다.

6, 10이 존재한다고 보았을 때,
6과 10을 마시는 것이 최대일 것이다.

6과 10과 13이 존재한다고 보았을 때,
10과 13을 마시는 것이 최대일 것이다.

6, 10, 13, 9가 존재한다고 할 때를 생각해보자,
6, 10, 9
6, 13, 9
10, 13
은 각각
25
28
23
의 수치를 갖는다.
그리고 이 셋은,
6과 10이 존재할 때의 최대 수치 + 현재 요소
6이 존재할 때의 최대 수치 + 현재 바로 이전 요소 + 현재 요소
현재 바로 이전 요소의 최대 수치
이다.
패턴이 보이지 않는가?

6, 10, 13, 9, 8이 존재한다고 보자.

10 + 13 + 8
6 + 10 + 9 + 8
6 + 13 + 9
이들 또한 각각 
현재 요소의 - 2인 인덱스에서의 최대 값과 현재 요소를 더한 것,
현재 요소의 - 3인 인덱스에서의 최대 값과 현재 요소의 바로 이전 요소를 더하고, 현재 요소를 더한 것,
현재 요소의 - 1인 인덱스에서의 최대 값이다.

깔끔하게 정리해보자면,
N번 째 요소에서 최대로 마실 수 있는 포도주 수치는
N - 1의 '최대값'이거나,
N - 2에서의 '최대값'과 현재 '요소'를 더한 것 또는,
N - 3에서의 '최대값'과 현재 요소의 바로 '이전 요소'와 '현재 요소'를 더한 것중 하나이다.
각각 계산해보면, 31, 33, 28로, 최대값은 33이된다.

자 마지막으로 전체 포도주를 놓고 생각해보자.
6, 10, 13, 9, 8, 1
N - 1의 최대값은 33이다.
N - 2의 최대값은 위에서 구했던 28이다.
	여기서 현재 요소를 더하면 29가 된다.
N - 3의 최대값은 위에서 구했던 23이다. 여기서 '현재 요소'와 바로 '이전 요소'를 더하면 32가 된다.
따라서 주어지는 예제에서의 답은 33이 되는 것이다.	

패턴을 생각하는 것조차 나에게 쉬운 일이 아니었다.
뚫어져라 문제화면을 쳐다보기만 했는데, 앞으로도 그래서는 위처럼 패턴을 파악하기 어려울 것이다.
조금이라도 패턴을 파악할 가능성을 올리기 위해서는,
위의 과정처럼 백지에 그림 또는 과정을 그려나가면서 일목요연하게 정리한다면,
패턴을 파악할 수 있을 것이다.

앞으로는 항상 종이와 펜을 지참하고 있자.

어쨋든 패턴은 파악했다.

n 번째 와인에서 최대로 마실 수 있는 와인 수치는,
wine[n] = 
Math.max(
	Math.max(
		wine[n - 3] + glass[n - 1] + glass[n],
		wine[n - 2] + glass[n])
		,
	wine[n - 1]
	)
이다.
저렇게 두 번에 걸쳐서 Math.max로 최대값을 구한 이유는,
먼저 사용한 Math.max는 현재 요소를 추가하는 경우의 최대값이고,
다음으로 사용한 Math.max는 
현재 요소를 추가할 때의 최대값과 현재 요소를 추가하지 않을 때의 최대값을 비교한 것이다.

자, 이걸 어쩔 것인가?
수학적 개념과 공식은 역사에 이름을 남긴 비상한 천재들조차 기적처럼 찾아온 번뜩이는 아이디어와, 
헤아릴 수 없는 인고의 노력 끝에 탄생한 것이다.
벨만씨조차 동적 계획법을 고안하고 정리하기까지 많은 시간이 들어갔을 것이다.

따라서 내가 혼자 백지 상태에서 그러한 것을 생각해내면 수학자를 해야하기 때문에,
빠르게 타인의 코드를 가져와보자.

dp 배열을 만들어서, for 반복문을 통해 저장하는 bottom-up 방식.

for (int i = 3; i <= N; i++) 
{
	dp[i] = Math.max
			(
				dp[i - 1],
				Math.max
				(
					dp[i - 2] + arr[i], 
					dp[i - 3] + arr[i - 1] + arr[i]
				)
			);
}


dp 배열을 만들어서 재귀 함수를 통해 저장하는 top-down 방식.
// 이 top-down 방식에서는 배열의 타입을 int가 아닌 Integer로 지정함으로써,
// 초기값이 0이 아닌 null이 되도록하여 dp[0]과 아직 탐색되지 않은 dp값이 구별되도록 하였다.

static int recur(int N) 
{
	if(dp[N] == null) 
	{
		dp[N] = Math.max(Math.max(recur(N - 2), recur(N - 3) + arr[N - 1]) + arr[N], recur(N - 1));
	}
	return dp[N];
}

bottom-up은 맨 첫번 째 요소부터 최대값을 저장해가는 방식이지만,
top-down은 재귀로 원하는 요소를 선택하면 해당 요소에서부터 첫 번째 요소에 도달할 때까지, 함수를 반복해 값을 찾아서 저장하는 방식이다.
	top-down 반식은 스택 메모리 영역에 함수들이 쌓여나가므로, 상대적으로 bottom-up 방식보다 더 많은 메모리를 소모한다.
	
두 방식 모두, 첫 번째 dp값과 두 번째 dp값은 따로 지정해줘야 하며,
dp 배열을 N + 1크기로 지정해둔 다음, dp[0]는 0으로 지정해줘야,
dp[3]을 계산할 때 outofbounds 에러가 발생하지 않는다.

이 파일을 정리한 것이 오늘 2월 12일,
14일이 스터디 모임이므로 13일에 이 문제를 보지 않고, top-down과 bottom-up을 이용해 다시 풀어보겠다.

우선 이 문제와 비슷한 boj_2579_계단오르기를 풀어보자.